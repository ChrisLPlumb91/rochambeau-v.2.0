@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Rubik+Burned&display=swap');

* {
    margin: 0;
    border: 0;
    padding: 0;
}

body {
    width: 100%;
    height: 100%;

    font-family: 'Bebas Neue', 'Comic Sans MS', cursive;
    color:#ffffff;
    letter-spacing: 10px;
    font-size: 2rem;
    text-shadow: 2px 2px #444444;
    
    background: url(../images/fire.jpg) no-repeat center center;
    background-color:#000000;
}

body > div {
    width: 100%;
}

h1, h2 {
    font-family: 'Rubik Burned', 'Brush Script MT', cursive;
    color: #fd811c;
    text-shadow: 4px 4px 4px #fd1c1c;
    letter-spacing: 8px;
}

h1 {
    font-size: 4rem;
}

h2 {
    font-size: 3rem;
}

/* Styling for all h3 elements. The use of comma separated box-shadow values, with one of them including the "inset" value, causes the h3 text
to glow inside and out. */
h3 {
    font-size: 2rem;
    color:#ffffff;
    letter-spacing: 16px;
    text-indent: 16px;
    line-height: 32px;

    margin-bottom: 8px;
    border: 2px solid #ffcece;
    border-radius: 16px 16px 16px 16px;
    box-sizing: border-box;
    padding-top: 2px;

    box-shadow: 0 0 32px #ff0000, 0 0 32px #ff0000 inset;

    width: 70%;
}

br {
    display: none;
}

p {
    line-height: 20px;
    text-align: left;
}

/* The three rules below are important parts of a centering technique that I used across the website. These classes are called many times. The technique works by
creating a div, setting its display to table, then nesting a div with display: table-cell within it, and then nesting a div with display: inline-block within that.
The table-cell will perfectly center the inline-block child within itself if it (the table-cell, that is) is given text-align: center and vertical-align: middle properties. 
Moreover, the table-cell itself must be nested within a table div for this to work. If you do not follow the pattern of table - table-cell - inline-block, a number of
weird issues crop up. In any case, by following this pattern, you can nest and centre as many times as you want. 

Often, I would set the width of the table div to a percentage, and the height to a pixel measurement. A table-cell automatically stretches to fit its container if
that container is set to table display. Then, I would nest an inline-block in the table-cell, and give it a width of a smaller percentage to the table, or indeed
a pixel value equivalent, as well as a smaller height. Giving the inline-block a border would reveal it to be centered perfectly within the table/table-cell.

That is the basic technique, and I found it to be quite adaptable. Throughout the site, I used it to produce various different visual results, and I was successful 
each time. 

(COMMENT TAKEN FROM MY PREVIOUS PROJECT)*/

.table-divs {
    display: table;
}

.table-cell-divs {
    display: table-cell;

    vertical-align: middle;
    text-align: center;
}

.inline-block-divs {
    display: inline-block;
}

/* Header and header children styling */
header {
    width: 100%;
    height: 185px;

    position: relative;
}

section > .table-cell-divs {
    vertical-align: top;
}

/* The use of a transparent background ensures that the button does not cover the character background image. */
button {
    width: 200px;
    height: 100px;

    background: transparent;

    cursor: pointer;
}

#sound-button-container-outer {
    width: 20%;
    height: 185px;

    float: left;
}

#sound-button-container-inner {
    width: 100%;
    height: 100%;
}

#sound-button-box-outer {
    width: 60px;
    height: 50px;

    position: relative
}

#sound-button-box-inner {
    width: 100%;
    height: 100%;
}

/* Styling for the sound toggle button. It is absolute relative to its parent, which has the same dimensions. This is necessary to create a button press
animation when it is clicked. */
#sound-button {
    width: 60px;
    height: 50px;

    border: 2px solid #0aad49;
    box-sizing: border-box;
    border-radius: 8px;
    box-shadow: 2px 2px #01773c, 0 0 16px #01773c inset;

    font-family: 'Bebas Neue', 'Comic Sans MS', cursive;
    color:#ffffff;
    letter-spacing: 5px;
    font-size: 1.5rem;
    text-shadow: 1px 1px #444444;

    background-color: #00ff80;

    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}

/* This is the styling for the modal that appears at the beginning and end of the game. It is fixed so that it follows any scrolling the player
might do on a device such as a phone, all while keeping the button (see next rule) at the centre of the screen. */
#play-again-container {
    position: fixed;
    z-index: 2;
    
    background-color: #000000c5;

    width: 100%;
    height: 100%;

    border: 2px solid #e6e3e3;
    box-sizing: border-box;
    box-shadow: 0 0 40px #a5a5a5, 0 0 40px #a5a5a5 inset;
}

#play-again-button {
    width: 50%;
    height: 20%;

    font-family: 'Bebas Neue', 'Comic Sans MS', cursive;
    color: #e6e3e3;
    letter-spacing: 5px;
    font-size: 2rem;
    text-shadow: 0 0 32px #a5a5a5;

    background-color: #000000a1;

    border: 2px solid #e6e3e3;
    border-radius: 8px;
    box-sizing: border-box;
    box-shadow: 0 0 40px #a5a5a5, 0 0 40px #a5a5a5 inset;
}

.title-container-outer {
    height: 185px;
    width: 60%;

    float: left;
}

.title-container-inner {
    width: 100%;
    height: 185px;
}

/* Styling for the main body of the game page */
.main-section {
    width: 100%;
    height: 750px;

    box-sizing: border-box;

    position: relative;
}

/* Styling for the left column of characters selectable by the player. */
.fighter-containers-outer {
    width: 18%;
    height: 750px;

    box-sizing: border-box;
    border-radius: 32px 32px 32px 32px;
    box-shadow: 0 0 32px #ff0000 inset;

    background: url(../images/metal-fighters.jpg) no-repeat center center;
    background-size: 100% 100%;
}

/* The use of a linear gradient in this rule creates the "hot metal" look. */
.fighter-containers-inner {
    width: 100%;
    height: 750px;

    border-radius: 32px 32px 32px 32px;

    background: linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,0), rgba(0,0,0,0), rgba(255, 70, 24, 0.89), rgb(255, 187, 0));
}

.fighter-containers-inner > div {
    vertical-align: bottom;
}

/* Styling for the inner div that contains the selectable characters. The use of a bright border and a red box shadow creates a laser-like visual. */
.fighter-boxes-outer {
    width: 200px;
    height: 680px;

    border: 3px solid #ffcece;
    box-sizing: border-box;

    box-shadow: 0 0 32px #ff0000 inset, 0 0 32px #ff0000; 
}

.fighter-boxes-inner {
    width: 100%;
    height: 680px;
}

.fighters {
    width: 60%;
    height: 14%;

    border: 2px solid #444444;
    box-sizing: border-box;  
}

.fighters ~ p {
    margin-bottom: 10px;
}

/* This rule ensures that the background image of this element's child div does not overflow. It is contained within the parallelogram.
The transform property's degree value creates the parallelogram appearance.*/
.player-fighters {
    transform: skewX(40deg);

    overflow: clip;
    
    position: relative;
}

.portraits {
    width: 200px;
    height: 100px;

    position: absolute;
}

/* The degree value of the transform property ensures that the portrait image is not skewed by its parent container, and retains its
orientation.

The position property is necessary to make the subject of each portrait properly visible and within the skewed frame.*/
.player-portraits {
    transform: skewX(320deg);

    right: -40px;

    pointer-events: stroke;
}

.player-fighters ~ p {
    text-align: left;
    margin-left: 8px;
}

.rock {
    background: url(../images/rock.jpg) no-repeat center center;
}

.paper {
    background: url(../images/paper.jpg) no-repeat center center;
}

.scissors {
    background: url(../images/scissors.jpg) no-repeat center center;
}

.lizard {
    background: url(../images/lizard.jpg) no-repeat center center; 
}

.spock {
    background: url(../images/spock.jpg) no-repeat center center;
}

.cpu-fighters {
    transform: skewX(320deg);

    overflow: clip;

    position: relative;
}

.cpu-fighters ~ p {
    text-align: right;
}

/* The use of scaleX here flips the portraits of the CPU's characters so that they are visually symmetrical with the player's characters. */
.cpu-portraits {
    transform: skewX(40deg) scaleX(-1);
    
    left: -40px;
}


/* Styling for the middle section where the fights occur, and where the score is tracked. Setting the background-size property in this way ensures
that the background image will resize as the window does. Ordinarily, this creates stretched or squashed visuals, but this is less noticeable
in this case, because the background image doesn't contain many distinct shapes.*/
.bout-and-scoreboard-container-outer {
    width: 60%;
    height: 700px;

    box-sizing: border-box;
    border-radius: 4%;
    box-shadow: 0 0 40px #ff0000 inset;

    background: url(../images/metal.jpg) no-repeat center center;
    background-size: 100% 100%;

    margin-bottom: 50px;
}

.bout-and-scoreboard-container-inner {
    width: 100%;
    height: 700px;

    border-radius: 4%;

    background: linear-gradient(140deg, rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(255, 70, 24, 0.89), rgb(255, 187, 0)), linear-gradient(210deg, rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(255, 70, 24, 0.89), rgb(255, 187, 0)), linear-gradient(to bottom, rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(0, 0 ,0 ,0), rgba(255, 70, 24, 0.89));
}


.bout-box-outer {
    width: 85%;
    height: 370px;

    box-sizing: border-box;

    border-top: 3px solid #383838;
    border-bottom: 3px solid #383838;
    border-radius: 16px 16px 16px 16px;
    box-shadow: 0 0 1000px #0e0b1b inset, 0 0 64px #0e0b1b;

    background: url(../images/bout-plate.jpg) no-repeat center center;
    background-size: 100% 100%;

    position: relative;
}

.bout-box-inner {
    width: 100%;
    height: 370px;
}

.contenders-box-outer {
    width: 200px;
    height: 370px;

    margin-top: 6px;
}

.contenders-box-inner {
    width: 100%;
    height: 370px;
}

.contenders-box-inner > div {
    vertical-align: bottom;
}

.left-contender-box {
    margin-right: 10%;
}

.right-contender-box {
    margin-left: 10%;
}

.contenders {
    width: 100%;
    height: 200px;

    border: 3px solid #444444;
    box-shadow: 0 0 64px #000000;
    box-sizing: border-box;
    border-radius: 50%;

    background: url(../images/contender-disc.jpg) no-repeat center center;
    background-size: 100% 100%;

    position: relative;
}

.nameplates {
    width: 100%;
    height: 74px;

    border-radius: 12px;

    box-shadow: 0 0 64px #000000, 0 0 40px #000000 inset;

    background: url(../images/small-plate.jpg);
    background-size: 100% 100%;
}

.nameplates > div {
    width: 100%;
    height: 100%;
}

.nameplate-text {
    text-shadow: 1px 1px #444444;
    letter-spacing: 2px;
}


/* Styling for the hidden finisher move message box that appears when the match is about to be won.
The use of percentages for both the left and right position properties has a rough centering effect.
It suspends the element in the middle of its parent, albeit slightly shakily.

This element's display is initially set to none, but this is later temporarily changed using JavaScript.*/
#ultimate-finisher-message-container {
    position: absolute;
    z-index: 2;

    top: 50px;
    left: 35%;
    right: 35%;

    width: 30%;
    height: 75px;

    padding: 4px;

    border: 2px solid #e6e3e3;
    box-sizing: border-box;
    border-radius: 4px;

    background-color: #0044ffa2;

    display: none;
}

#ultimate-finisher-message-container > div {
    width: 100%;
    height: 100%;
}

#ultimate-finisher-message {
    font-size: 1.5rem;
    letter-spacing: 4px;
}

.vs-box-outer {
    height: 370px;
}

.vs-box-inner {
    height: 370px;
}

.vs-box-inner h2 {
    color: #918f8f;
    text-shadow: 2px 2px #444444;
}

/* Styling for the scoreboard portion of the central section. */
.scoreboard-box-outer {
    width: 60%;
    height: 240px;

    border: 2px solid #444444;
    box-sizing: border-box;
    border-radius: 8px 8px 8px 8px;
    box-shadow: 0 0 64px #000000, 0 0 64px #0e0b1b inset;

    background: url(../images/metal-plate.jpg) no-repeat center center;
    background-size: 100% 100%;
}

.scoreboard-box-inner {
    width: 100%;
    height: 240px; 
}

.scoreboard-heading-outer {
    width: 100%;
    height: 80px;
}

.scoreboard-heading-inner {
    width: 100%;
    height: 80px;
}

.scoreboard-heading-inner > div {
    vertical-align: top;
}

.scoreboard-heading-inner h2 {
    color: #444444;
    text-shadow: 2px 2px #acacac;
}

.scoreboard-placings-outer {
    width: 80%;
    height: 90px;
}

.scoreboard-placings-inner {
    width: 100%;
    height: 90px;
}

/* The image used for the lamps is square, but by having it's container be circular and not permitting of overflow, the illusion that the
image itself is circular is achieved. */
.round-lamps {
    width: 90px;
    height: 90px;
    
    background: url(../images/round-light.jpg) no-repeat center center;
    background-size: 100% 100%;

    border: 2px solid #444444;
    box-sizing: border-box;
    border-radius: 50%;
    box-shadow: 0 0 32px #000000;

    overflow: clip;
}

.round-lamps-player {
    float: left;
}

.round-lamps-cpu {
    float: right;
}

.light-off {
    width: 100%;
    height: 100%;
    background-color: #0000007e;
}


/* Media Queries */

@media screen and (max-width: 1669px) {
    .left-contender-box {
        margin-right: 5%;
    }

    .right-contender-box {
        margin-left: 5%;
    }
}

@media screen and (max-width: 1487px) {
    h3 {
        width: 188px;
    }
}

@media screen and (max-width: 1427px) {
    .left-contender-box {
        margin-right: 0;
    }

    .right-contender-box {
        margin-left: 0;
    }
}

@media screen and (max-width: 1400px) {
    .scoreboard-box-outer {
        width: 70%;
    }
}

@media screen and (max-width: 1258px) {
    .bout-box-outer {
        width: 90%;
    }
    
    .fighter-containers-outer {
        width: 226px;
    }
}

@media screen and (max-width: 1223px) {
    .bout-and-scoreboard-container-outer {
        margin-bottom: 0;
    }
    
    .player-fighters-container-outer {
        position: absolute;
        left: 100px;
        z-index: 1;

        border-right: 2px solid #6b0000;
    }

    .cpu-fighters-container-outer {
        position: absolute;
        right: 100px;
        z-index: 1;

        border-left: 2px solid #6b0000;
    }
}

@media screen and (max-width: 1180px) {
    .bout-box-outer {
        position: relative;
    }
    
    .versus-text {
        position: absolute;
        right: 265px;
        left: 265px;
        bottom: 70px;
        z-index: 1;
    }

    .vs-box-inner h2 {
        color:#aaa9a9;
    }
}

@media screen and (max-width: 1128px) {
    .versus-text {
        right: 140px;
        left: 140px;
    }
}

@media screen and (max-width: 1110px) {
    .main-section {
        height: 1080px;
    }
    
    .bout-and-scoreboard-container-outer {
        width: 80%;
        height: 1082px;
    }

    .bout-and-scoreboard-container-inner {
        width: 100%;
        height: 1082px;
    }
    
    .bout-box-outer {
        width: 430px;
        height: 820px;

        background: url(../images/bout-plate-vertical.jpg) no-repeat center center;
        background-size: 100% 100%;

        box-shadow: 0 0 64px #0e0b1b inset;
    }

    .bout-box-inner {
        width: 100%;
        height: 820px;
    }

    .contenders-box-outer {
        height: 300px; 
    }

    .contenders-box-inner {
        height: 300px;
    }

    .vs-box-outer {
        width: 100%;
        height: 57px;
    }

    .vs-box-inner {
        width: 100%;
        height: 100%;
    }

    .versus-text {
        position: static;     
    }

    #ultimate-finisher-message-container {
        width: 50%;

        top: 0;
        left: 25%;
        right: 25%;
    }
}

@media screen and (max-width: 944px) {
    #sound-button-container-outer {
        width: 10%;
    }

    .title-container-outer {
        width: 80%;
    }
}

/* Rather than squash the fire backdrop as the viewport width decreases, I changed it to a version of the image
that has different dimensions so that a more interesting segment of it is captured, and serves as the backdrop
for narrower screens.

This occurs one more time at a narrower width.*/
@media screen and (max-width: 928px) {
    body {
        background: url(../images/fire-bigger.jpg) no-repeat center center;
    }
    
    .bout-and-scoreboard-container-outer {
        width: 685px;
    }

    body {
        text-align: center;
    }

    .main-section {
        width: 685px;

        position: relative;

        display: inline-block;
    }

    .player-fighters-container-outer {
        left: 0;
    }

    .cpu-fighters-container-outer {
        right: 0;
    }
}

@media screen and (max-width: 770px) {
    #sound-button-container-inner > div {
        vertical-align: bottom;
    }

    #sound-button-box-outer {
        margin-bottom: 20px;
    }
}

@media screen and (max-width: 712px) {
    #sound-button-container-outer {
        width: 0;
    }

    #sound-button-box-outer {
        position: absolute;

        top: 104px;
        left: 5px;
    }

    .title-container-outer {
        width: 100%;
    }
}

@media screen and (max-width: 703px) {
    .main-section {
        width: 100%;
    }
    
    .bout-and-scoreboard-container-outer {
        width: 100%;
    }

    .bout-and-scoreboard-container-inner > div {
        text-align: right;
    }
    
    .cpu-fighters-container-outer {
        visibility: hidden;
    }

    .scoreboard-box-outer {
        width: 100%;
    }

    #ultimate-finisher-message-container {
        width: 50%;

        top: 0;
        left: 25%;
        right: 25%;
    }
}

@media screen and (max-width: 585px) {
    .bout-box-outer {
        width: 330px;
    }
}

@media screen and (max-width: 573px) {
    header h1 {
        font-size: 3rem;
    }
    
    header h2 {
        font-size: 2rem;
    }
}

@media screen and (max-width: 507px) {
    body {
        background: url('../images/fire-biggest.jpg') no-repeat center center;
    }
    
    .main-section {
        height: 100%;
    }
    
    .bout-and-scoreboard-container-inner > div {
        text-align: center;
    }

    .player-fighters-container-outer {
        position: static;
    }

    .scoreboard-box-outer {
        width: 100%;
    }

    .scoreboard-box-outer h2 {
        font-size: 2rem;
    }

    .scoreboard-heading-outer {
        height: 50px;
    }

    .scoreboard-heading-inner {
        height: 50px;
    }

    .round-lamps {
        width: 64px;
        height: 64px;
    }

    #ultimate-finisher-message-container {
        width: 70%;
        
        left: 15%;
        right: 15%;
    }
}

@media screen and (max-width: 454px) {
    header h1 {
        font-size: 2.5rem;
    }
    
    header h2 {
        font-size: 1.5rem;
    }
}

@media screen and (max-width: 392px) {
    header {
        height: 200px;
    }
    
    br {
        display: block;
    }

    .scoreboard-heading-outer {
        height: 85px;
    }

    .scoreboard-heading-inner {
        height: 85px;
    }
}

@media screen and (max-width: 370px) {
    .scoreboard-placings-outer {
        width: 90%;
    }
}

@media screen and (max-width: 357px) {
    .bout-box-outer {
        width: 100%;

        box-shadow: 0 0 64px #1a1431 inset;
    }
}

@media screen and (max-width: 320px) {
    #sound-button-box-outer {
        top: 10px;
    }
    
    .round-lamps {
        width: 50px;
        height: 50px;
    }
}

/* I used a media query like this in my previous project. It ensures that the page doesn't look bizarre when you zoom out in your browser window.
The widths become fixed values rather than percentages. because as percentages, they stretch across the screen when the viewport width increases
with the zoom.*/
@media screen and (min-width: 1920px) {
    body {
        text-align: center;
    }

    body > div {
        width: 1920px;
    }

    #play-again-container {
        width: 1920px;
        height: 1080px;
    }
}